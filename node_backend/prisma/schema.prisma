generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  password     String?
  googleId     String?  @unique
  user_type    UserType @default(user)
  roleSelected Boolean  @default(false)
}

enum UserType {
  user
  operator
  partner
}

model Agency {
  agency_id       String  @id
  agency_name     String
  agency_phone    String?
  agency_lang     String?
  agency_timezone String
  agency_url      String
  Routes          Route[]
}

model Calendar {
  service_id String  @id
  start_date Int
  end_date   Int
  monday     Boolean
  tuesday    Boolean
  wednesday  Boolean
  thursday   Boolean
  friday     Boolean
  saturday   Boolean
  sunday     Boolean
  Trips      Trip[]
}

model Route {
  route_id   String  @id
  short_name String
  long_name  String
  route_desc String?
  text_color String?
  type       Int
  url        String?
  agency_id  String
  Agency     Agency  @relation(fields: [agency_id], references: [agency_id])
  Trips      Trip[]
}

model Stop {
  stop_id             String   @id
  stop_name           String
  stop_lat            String
  stop_lon            String
  stop_code           String?
  stop_desc           String?
  stop_timezone       String?
  stop_url            String?
  wheelchair_boarding Boolean?
  zone_id             String?
}

model Trip {
  trip_id       Int      @id
  trip_headsign String
  route_id      String
  direction_id  Int
  service_id    String
  shape_id      String?
  Route         Route    @relation(fields: [route_id], references: [route_id])
  Calendar      Calendar @relation(fields: [service_id], references: [service_id])
}

model SuggestedRoute {
  id          String   @id @default(cuid())
  source      String
  destination String
  coordinates Json // Array of coordinate arrays
  createdAt   DateTime @default(now())
}

model BusRoute {
  id             Int      @id @default(autoincrement())
  routeNumber    String   @unique
  routeName      String
  origin         String
  departureTimes String // Store departure times as a comma-separated string or as Json if needed
  mapJsonContent Json // Store detailed stop information as JSON
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
